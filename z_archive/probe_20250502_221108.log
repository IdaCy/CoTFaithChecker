nohup: ignoring input
Working dir: /root/CoTFaithChecker
Working dir: /root/CoTFaithChecker
Working dir: /root/CoTFaithChecker
Working dir: /root/CoTFaithChecker
on host fd4b7fbca240 (PID 9414) ===
starting at 2025-05-02T23:11:20+01:00
on host fd4b7fbca240 (PID 9417) ===
starting at 2025-05-02T23:11:20+01:00
on host fd4b7fbca240 (PID 9415) ===
starting at 2025-05-02T23:11:20+01:00
on host fd4b7fbca240 (PID 9416) ===
starting at 2025-05-02T23:11:20+01:00
launching at 2025-05-02T23:11:23+01:00
loading answers at 2025-05-02T23:11:23+01:00
tokenizing1 at 2025-05-02T23:11:24+01:00
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
launching at 2025-05-02T23:11:25+01:00
loading answers at 2025-05-02T23:11:25+01:00
tokenizing1 at 2025-05-02T23:11:25+01:00
[rank3]:[W502 22:11:25.322233298 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 3]  using GPU 3 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
launching at 2025-05-02T23:11:25+01:00
loading answers at 2025-05-02T23:11:25+01:00
tokenizing1 at 2025-05-02T23:11:25+01:00
[rank1]:[W502 22:11:25.338203878 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 1]  using GPU 1 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
[rank0]:[W502 22:11:25.342040111 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 0]  using GPU 0 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
launching at 2025-05-02T23:11:25+01:00
loading answers at 2025-05-02T23:11:25+01:00
tokenizing1 at 2025-05-02T23:11:25+01:00
[rank2]:[W502 22:11:25.513536822 ProcessGroupNCCL.cpp:4115] [PG ID 0 PG GUID 0 Rank 2]  using GPU 2 to perform barrier as devices used by this process are currently unknown. This can potentially cause a hang if this rank to GPU mapping is incorrect.Specify device_ids in barrier() to force use of a particular device,or call init_process_group() with a device_id.
YES id=22483  |  NO id=11698
tokenizing2 at 2025-05-02T23:11:37+01:00
Loading model to read out lm_head …
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
tokenizing2 at 2025-05-02T23:11:38+01:00
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]tokenizing2 at 2025-05-02T23:11:38+01:00
tokenizing2 at 2025-05-02T23:11:38+01:00
Loading checkpoint shards:  50%|█████     | 1/2 [00:11<00:11, 11.79s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  7.25s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  7.93s/it]
  ↳ done in 20.6s
reading out lm_head at 2025-05-02T23:11:58+01:00
Processing 592 files on 4 ranks (148 / rank)
hidden.pt:   0%|          | 0/148 [00:00<?, ?it/s]iterating at 2025-05-02T23:11:58+01:00
/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py:194: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  batch_hidden: list[torch.Tensor] = torch.load(hid_path)  # list[n_layers]
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]hidden.pt:   3%|▎         | 4/148 [00:00<00:11, 12.36it/s]hidden.pt:   7%|▋         | 10/148 [00:00<00:05, 26.07it/s]hidden.pt:  11%|█         | 16/148 [00:00<00:03, 34.91it/s]hidden.pt:  15%|█▍        | 22/148 [00:00<00:03, 40.86it/s]hidden.pt:  19%|█▉        | 28/148 [00:00<00:02, 44.85it/s]hidden.pt:  23%|██▎       | 34/148 [00:00<00:02, 47.57it/s]hidden.pt:  27%|██▋       | 40/148 [00:00<00:02, 49.20it/s]hidden.pt:  31%|███       | 46/148 [00:01<00:02, 50.44it/s]hidden.pt:  35%|███▌      | 52/148 [00:01<00:01, 51.34it/s]hidden.pt:  39%|███▉      | 58/148 [00:01<00:02, 34.90it/s]hidden.pt:  43%|████▎     | 64/148 [00:01<00:02, 39.08it/s]hidden.pt:  47%|████▋     | 70/148 [00:01<00:01, 42.67it/s]hidden.pt:  51%|█████▏    | 76/148 [00:01<00:01, 45.49it/s]hidden.pt:  55%|█████▌    | 82/148 [00:01<00:01, 47.70it/s]hidden.pt:  59%|█████▉    | 88/148 [00:02<00:01, 49.23it/s]hidden.pt:  64%|██████▎   | 94/148 [00:02<00:01, 49.83it/s]hidden.pt:  68%|██████▊   | 100/148 [00:02<00:00, 50.69it/s]hidden.pt:  72%|███████▏  | 106/148 [00:02<00:00, 51.55it/s]hidden.pt:  76%|███████▌  | 112/148 [00:02<00:00, 52.14it/s]hidden.pt:  80%|███████▉  | 118/148 [00:02<00:00, 52.53it/s]hidden.pt:  84%|████████▍ | 124/148 [00:02<00:00, 34.18it/s]hidden.pt:  88%|████████▊ | 130/148 [00:03<00:00, 38.43it/s]hidden.pt:  92%|█████████▏| 136/148 [00:03<00:00, 42.11it/s]hidden.pt:  96%|█████████▌| 142/148 [00:03<00:00, 45.08it/s]hidden.pt: 100%|██████████| 148/148 [00:03<00:00, 47.34it/s]                                                            collecting at 2025-05-02T23:12:02+01:00
Rank 0: collected 156,288 samples in 0.1 min
Loading checkpoint shards:  50%|█████     | 1/2 [00:11<00:11, 11.21s/it]Loading checkpoint shards:  50%|█████     | 1/2 [00:11<00:11, 11.28s/it]Loading checkpoint shards:  50%|█████     | 1/2 [00:11<00:11, 11.93s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  6.92s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  7.57s/it]
Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  6.95s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:15<00:00,  7.60s/it]
Loading checkpoint shards: 100%|██████████| 2/2 [00:16<00:00,  7.33s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:16<00:00,  8.02s/it]
reading out lm_head at 2025-05-02T23:12:19+01:00
reading out lm_head at 2025-05-02T23:12:19+01:00
iterating at 2025-05-02T23:12:19+01:00
/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py:194: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  batch_hidden: list[torch.Tensor] = torch.load(hid_path)  # list[n_layers]
reading out lm_head at 2025-05-02T23:12:19+01:00
iterating at 2025-05-02T23:12:19+01:00
/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py:194: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  batch_hidden: list[torch.Tensor] = torch.load(hid_path)  # list[n_layers]
iterating at 2025-05-02T23:12:19+01:00
/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py:194: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  batch_hidden: list[torch.Tensor] = torch.load(hid_path)  # list[n_layers]
collecting at 2025-05-02T23:12:20+01:00
collecting at 2025-05-02T23:12:22+01:00
collecting at 2025-05-02T23:12:23+01:00
[rank1]: Traceback (most recent call last):
[rank1]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 297, in <module>
[rank1]:     main()
[rank1]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 215, in main
[rank1]:     bucket_shards = accelerator.gather_object(layer_buckets)  # list[dict] – 1/rank
[rank1]: AttributeError: 'Accelerator' object has no attribute 'gather_object'
[rank2]: Traceback (most recent call last):
[rank2]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 297, in <module>
[rank2]:     main()
[rank2]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 215, in main
[rank2]:     bucket_shards = accelerator.gather_object(layer_buckets)  # list[dict] – 1/rank
[rank2]: AttributeError: 'Accelerator' object has no attribute 'gather_object'
[rank0]: Traceback (most recent call last):
[rank0]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 297, in <module>
[rank0]:     main()
[rank0]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 215, in main
[rank0]:     bucket_shards = accelerator.gather_object(layer_buckets)  # list[dict] – 1/rank
[rank0]: AttributeError: 'Accelerator' object has no attribute 'gather_object'
[rank3]: Traceback (most recent call last):
[rank3]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 297, in <module>
[rank3]:     main()
[rank3]:   File "/root/CoTFaithChecker/i_probe_steer/main/xyyx_probing.py", line 215, in main
[rank3]:     bucket_shards = accelerator.gather_object(layer_buckets)  # list[dict] – 1/rank
[rank3]: AttributeError: 'Accelerator' object has no attribute 'gather_object'
[rank0]:[W502 22:12:24.080818695 ProcessGroupNCCL.cpp:1250] Warning: WARNING: process group has NOT been destroyed before we destruct ProcessGroupNCCL. On normal program exit, the application should call destroy_process_group to ensure that any pending NCCL operations have finished in this process. In rare cases this process can exit before this point and block the progress of another member of the process group. This constraint has always been present,  but this warning has only been added since PyTorch 2.4 (function operator())
W0502 22:12:25.065000 9241 torch/distributed/elastic/multiprocessing/api.py:897] Sending process 9414 closing signal SIGTERM
W0502 22:12:25.066000 9241 torch/distributed/elastic/multiprocessing/api.py:897] Sending process 9415 closing signal SIGTERM
W0502 22:12:25.066000 9241 torch/distributed/elastic/multiprocessing/api.py:897] Sending process 9416 closing signal SIGTERM
E0502 22:12:25.683000 9241 torch/distributed/elastic/multiprocessing/api.py:869] failed (exitcode: 1) local_rank: 3 (pid: 9417) of binary: /usr/bin/python3
Traceback (most recent call last):
  File "/usr/local/bin/accelerate", line 8, in <module>
    sys.exit(main())
  File "/usr/local/lib/python3.10/dist-packages/accelerate/commands/accelerate_cli.py", line 50, in main
    args.func(args)
  File "/usr/local/lib/python3.10/dist-packages/accelerate/commands/launch.py", line 1204, in launch_command
    multi_gpu_launcher(args)
  File "/usr/local/lib/python3.10/dist-packages/accelerate/commands/launch.py", line 825, in multi_gpu_launcher
    distrib_run.run(args)
  File "/usr/local/lib/python3.10/dist-packages/torch/distributed/run.py", line 910, in run
    elastic_launch(
  File "/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py", line 138, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py", line 269, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
i_probe_steer/main/xyyx_probing.py FAILED
------------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2025-05-02_22:12:25
  host      : fd4b7fbca240
  rank      : 3 (local_rank: 3)
  exitcode  : 1 (pid: 9417)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
